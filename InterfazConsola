//Esta clase es la "Vista" en MVC. Muestra el menú en la consola y lee lo que el usuario escribe. También valida que los datos sean correctos, como nombres o precios.
package com.akihabara.market.view;

import com.akihabara.market.model.ProductoOtaku; // Para manejar productos
import java.util.List; // Para mostrar listas
import java.util.Scanner; // Para leer lo que escribe el usuario
import com.akihabara.market.service.*;

public class InterfazConsola {
    private final Scanner scanner; // Objeto para leer de la consola

    // Constructor: crea el Scanner
    public InterfazConsola() {
        this.scanner = new Scanner(System.in);
    }

    // Método para mostrar el menú principal
    public void mostrarMenu() {
        System.out.println("\nMenú Akihabara Market");
        System.out.println("1. Añadir producto");
        System.out.println("2. Consultar producto por ID");
        System.out.println("3. Listar todos los productos");
        System.out.println("4. Listar productos por nombre");
        System.out.println("5. Listar productos por categoría");
        System.out.println("6. Actualizar producto");
        System.out.println("7. Eliminar producto");
        System.out.println("8. Sugerir nombre IA");
        System.out.println("9. Salir");
        System.out.print("Seleccione una opción (1-9): ");
    }

    // Método para leer la opción del menú
    public int leerOpcionMenu() {
        try {
            String input = scanner.nextLine().trim(); // Leemos y quitamos espacios
            int opcion = Integer.parseInt(input); // Convertimos a número
            if (opcion >= 1 && opcion <= 9) { // Validamos que esté entre 1 y 12
                return opcion;
            } else {
                System.out.println("Error: La opción debe estar entre 1 y 9.");
                return -1; // Devolvemos -1 si es inválida
            }
        } catch (NumberFormatException e) {
            System.out.println("Error: Ingrese un número válido.");
            return -1; // Devolvemos -1 si no es un número
        }
    }

    // Método para pedir los datos de un producto
    public ProductoOtaku pedirDatosProducto() {
        System.out.println("\n=== Ingresar datos del producto ===");
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine().trim();
        while (nombre.isEmpty()) { // Validamos que no esté vacío
            System.out.println("Error: El nombre no puede estar vacío.");
            System.out.print("Nombre: ");
            nombre = scanner.nextLine().trim();
        }

        System.out.print("Categoría (Figura, Manga, Póster, Llavero, Ropa): ");
        String categoria = scanner.nextLine().trim();
        while (!esCategoriaValida(categoria)) { // Validamos la categoría
            System.out.println("Error: Categoría no válida. Use: Figura, Manga, Póster, Llavero, Ropa.");
            System.out.print("Categoría: ");
            categoria = scanner.nextLine().trim();
        }

        double precio = 0;
        boolean precioValido = false;
        while (!precioValido) {
            System.out.print("Precio: ");
            try {
                precio = Double.parseDouble(scanner.nextLine().trim()); // Convertimos a decimal
                if (precio > 0) {
                    precioValido = true;
                } else {
                    System.out.println("Error: El precio debe ser mayor que 0.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Error: Ingrese un precio válido (ej. 29.99).");
            }
        }

        int stock = 0;
        boolean stockValido = false;
        while (!stockValido) {
            System.out.print("Stock: ");
            try {
                stock = Integer.parseInt(scanner.nextLine().trim()); // Convertimos a entero
                if (stock >= 0) {
                    stockValido = true;
                } else {
                    System.out.println("Error: El stock no puede ser negativo.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Error: Ingrese un número entero válido para el stock.");
            }
        }

        // Creamos y devolvemos el producto
        return new ProductoOtaku(0, nombre, categoria, precio, stock);
    }


    // Método para pedir un ID (de producto o cliente)
    public int pedirId(String tipo) {
        System.out.print("Ingrese el ID de " + tipo + ": ");
        try {
            int id = Integer.parseInt(scanner.nextLine().trim());
            if (id > 0) {
                return id;
            } else {
                System.out.println("Error: El ID debe ser mayor que 0.");
                return -1;
            }
        } catch (NumberFormatException e) {
            System.out.println("Error: Ingrese un ID numérico válido.");
            return -1;
        }
    }

    // Método para pedir un nombre de producto para buscar
    public String pedirNombreProducto() {
        System.out.print("Ingrese el nombre o parte del nombre del producto: ");
        String nombre = scanner.nextLine().trim();
        if (nombre.isEmpty()) {
            System.out.println("Error: El nombre no puede estar vacío.");
            return null;
        }
        return nombre;
    }

    // Método para pedir una categoría
    public String pedirCategoria() {
        System.out.print("Ingrese la categoría (Figura, Manga, Póster, Llavero, Ropa): ");
        String categoria = scanner.nextLine().trim();
        if (esCategoriaValida(categoria)) {
            return categoria;
        } else {
            System.out.println("Error: Categoría no válida. Use: Figura, Manga, Póster, Llavero, Ropa.");
            return null;
        }
    }
    
    public String pedirDatosIA() {
    	System.out.print("Ingrese la categoría (Figura, Manga, Póster, Llavero, Ropa): ");
        String categoria = scanner.nextLine().trim();
        
        System.out.print("Ingrese la franquicia: ");
        String franquicia = scanner.nextLine().trim();
        
        IAService IA = new IAService();
        String resultado = IA.sugerirNombreProducto(categoria, franquicia);
        
        return resultado;
    }

    // Método para mostrar un producto
    public void mostrarProducto(ProductoOtaku producto) {
        if (producto != null) {
            System.out.println("Producto encontrado: " + producto);
        } else {
            System.out.println("No se encontró el producto.");
        }
    }


    // Método para mostrar una lista de productos
    public void mostrarListaProductos(List<ProductoOtaku> productos) {
        if (productos.isEmpty()) {
            System.out.println("No se encontraron productos.");
        } else {
            System.out.println("\n=== Lista de Productos ===");
            for (ProductoOtaku p : productos) {
                System.out.println(p);
            }
            System.out.println("Total: " + productos.size() + " producto(s).");
        }
    }

    // Método para mostrar un mensaje
    public void mostrarMensaje(String mensaje) {
        System.out.println(mensaje);
    }

    // Método para mostrar un error
    public void mostrarError(String mensaje) {
        System.out.println("Error: " + mensaje);
    }

    // Método privado para validar categorías
    private boolean esCategoriaValida(String categoria) {
        String[] categoriasValidas = {"Figura", "Manga", "Póster", "Llavero", "Ropa"};
        for (String valida : categoriasValidas) {
            if (valida.equalsIgnoreCase(categoria)) {
                return true;
            }
        }
        return false;
    }

    // Método para cerrar el Scanner
    public void cerrarScanner() {
        scanner.close();
    }
}
