//Esta clase es como un puente entre el programa y la tabla "producto" en la base de datos. Permite añadir, buscar, actualizar y eliminar productos. DAO significa Data Access Object.
package com.akihabara.market.dao;

import com.akihabara.market.model.ProductoOtaku; // La clase del producto
import java.sql.Connection; // Para conectar con la base de datos
import java.sql.PreparedStatement; // Para hacer consultas seguras
import java.sql.ResultSet; // Para guardar los resultados de las consultas
import java.sql.SQLException; // Para manejar errores
import java.util.ArrayList; // Para guardar listas de productos
import java.util.List; // Para devolver listas
import java.util.Properties; // Para leer config.properties

public class ProductoDAO {
    private final DatabaseConnection dbConnection = new DatabaseConnection(); // Objeto para conectar con la base de datos
    Connection conexion = dbConnection.getConnection();

    // Método para añadir un producto a la base de datos
    public void agregarProducto(ProductoOtaku producto) {
        // Consulta SQL para insertar un producto
        try { 
            String sql = "INSERT INTO producto (nombre, categoria, precio, stock) VALUES (?, ?, ?, ?)";
            PreparedStatement pstmt = conexion.prepareStatement(sql);

            pstmt.setString(1, producto.getNombre());
            pstmt.setString(2, producto.getCategoria());
            pstmt.setDouble(3, producto.getPrecio());
            pstmt.setInt(4, producto.getStock());
            pstmt.executeUpdate(); // Ejecutamos la consulta
            System.out.println("Producto agregado: " + producto.getNombre());
        } catch (SQLException e) {
            // Si hay un error, lo mostramos
            System.out.println("Error al agregar producto: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Método para buscar un producto por su ID
    public ProductoOtaku obtenerProductoPorId(int id) {
        try {
        	String sql = "SELECT * FROM producto WHERE id = ?";
            PreparedStatement pstmt = conexion.prepareStatement(sql);
            
            pstmt.setInt(1, id); // Ponemos el ID en la consulta
            try (ResultSet rs = pstmt.executeQuery()) { // Ejecutamos y obtenemos resultados
                if (rs.next()) { // Si hay un resultado
                    // Creamos un producto con los datos
                    return new ProductoOtaku(
                        rs.getInt("id"),
                        rs.getString("nombre"),
                        rs.getString("categoria"),
                        rs.getDouble("precio"),
                        rs.getInt("stock")
                    );
                }
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener producto por ID: " + e.getMessage());
            e.printStackTrace();
        }
        return null; // Si no encontramos el producto, devolvemos null
    }

    // Método para obtener todos los productos
    public List<ProductoOtaku> obtenerTodosLosProductos() {
        try {
        	List<ProductoOtaku> productos = new ArrayList<>(); // Lista para guardar los productos
            String sql = "SELECT * FROM producto";
            PreparedStatement pstmt = conexion.prepareStatement(sql);
            
            ResultSet rs = pstmt.executeQuery();
            
            while (rs.next()) { // Recorremos todos los resultados
                productos.add(new ProductoOtaku( // Añadimos cada producto a la lista
                    rs.getInt("id"),
                    rs.getString("nombre"),
                    rs.getString("categoria"),
                    rs.getDouble("precio"),
                    rs.getInt("stock")
                ));
            }
            System.out.println("Se obtuvieron " + productos.size() + " productos.");
            return productos;
        } catch (SQLException e) {
            System.out.println("Error al obtener productos: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
        
    }

    // Método para actualizar un producto
    public boolean actualizarProducto(ProductoOtaku producto) {
        
        try {
        	String sql = "UPDATE producto SET nombre = ?, categoria = ?, precio = ?, stock = ? WHERE id = ?";
        	PreparedStatement pstmt = conexion.prepareStatement(sql);
        	
            // Ponemos los nuevos valores en la consulta
            pstmt.setString(1, producto.getNombre());
            pstmt.setString(2, producto.getCategoria());
            pstmt.setDouble(3, producto.getPrecio());
            pstmt.setInt(4, producto.getStock());
            pstmt.setInt(5, producto.getId());
            int rows = pstmt.executeUpdate(); // Ejecutamos y contamos filas afectadas
            if (rows > 0) {
                System.out.println("Producto actualizado: " + producto.getNombre());
                return true; // Actualización exitosa
            }
        } catch (SQLException e) {
            System.out.println("Error al actualizar producto: " + e.getMessage());
            e.printStackTrace();
        }
        return false; // Si no se actualizó, devolvemos false
    }

    // Método para eliminar un producto
    public boolean eliminarProducto(int id) {
        try {
        	String sql = "DELETE FROM producto WHERE id = ?";
        	PreparedStatement pstmt = conexion.prepareStatement(sql);
        	
            pstmt.setInt(1, id); // Ponemos el ID
            int rows = pstmt.executeUpdate(); // Ejecutamos
            if (rows > 0) {
                System.out.println("Producto eliminado con ID: " + id);
                return true; // Eliminación exitosa
            }
        } catch (SQLException e) {
            System.out.println("Error al eliminar producto: " + e.getMessage());
            e.printStackTrace();
        }
        return false; // Si no se eliminó, devolvemos false
    }

    // Método para buscar productos por nombre
    public List<ProductoOtaku> buscarProductosPorNombre(String nombre) {
        try {
        	List<ProductoOtaku> productos = new ArrayList<>();
            String sql = "SELECT * FROM producto WHERE nombre = ?";
            PreparedStatement pstmt = conexion.prepareStatement(sql);
            
            pstmt.setString(1, nombre); // Buscamos coincidencias parciales
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    productos.add(new ProductoOtaku(
                        rs.getInt("id"),
                        rs.getString("nombre"),
                        rs.getString("categoria"),
                        rs.getDouble("precio"),
                        rs.getInt("stock")
                    ));
                }
                System.out.println("Se encontraron " + productos.size() + " productos con nombre: " + nombre);
                return productos;
            }
        } catch (SQLException e) {
            System.out.println("Error al buscar por nombre: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
        
    }

    // Método para buscar productos por categoría
    public List<ProductoOtaku> buscarProductoPorCategoria(String categoria) {
        try {
        	List<ProductoOtaku> productos = new ArrayList<>();
            String sql = "SELECT * FROM producto WHERE categoria = ?";
            
            PreparedStatement pstmt = conexion.prepareStatement(sql);
            
            pstmt.setString(1, categoria);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    productos.add(new ProductoOtaku(
                        rs.getInt("id"),
                        rs.getString("nombre"),
                        rs.getString("categoria"),
                        rs.getDouble("precio"),
                        rs.getInt("stock")
                    ));
                }
                System.out.println("Se encontraron " + productos.size() + " productos en categoría: " + categoria);
                return productos;
            }
        } catch (SQLException e) {
            System.out.println("Error al buscar por categoría: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
}
