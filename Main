//Esta clase es el "Controlador" en MVC. Es el programa principal que inicia la aplicación en consola. Lee el archivo config.properties, muestra el menú y ejecuta las opciones que elige el usuario.

import com.akihabara.market.dao.ProductoDAO; // Para manejar productos
import com.akihabara.market.model.ProductoOtaku; // Modelo de producto
import com.akihabara.market.service.IAService; // Para la simulación de IA
import com.akihabara.market.view.InterfazConsola; // La vista en consola

public class Main {
    // Método principal: aquí empieza el programa
    public static void main(String[] args) {
        // Creamos los objetos principales
        InterfazConsola vista = new InterfazConsola(); // La vista en consola
        ProductoDAO productoDAO = new ProductoDAO(); // DAO para productos
        IAService iaService = new IAService(); // Servicio de IA simulada

        // Bucle principal: muestra el menú hasta que el usuario salga
        boolean salir = false;
        while (!salir) {
            vista.mostrarMenu(); // Mostramos el menú
            int opcion = vista.leerOpcionMenu(); // Leemos la opción

            switch (opcion) {
                case 1: // Añadir producto
                    ProductoOtaku producto = vista.pedirDatosProducto(); // Pedimos datos
                    productoDAO.agregarProducto(producto); // Añadimos el producto
                    vista.mostrarMensaje("Producto añadido correctamente.");
                    break;

                case 2: // Consultar producto por ID
                    int idProducto = vista.pedirId("producto");
                    if (idProducto != -1) {
                        ProductoOtaku p = productoDAO.obtenerProductoPorId(idProducto);
                        vista.mostrarProducto(p); // Mostramos el producto
                    }
                    break;

                case 3: // Listar todos los productos
                    vista.mostrarListaProductos(productoDAO.obtenerTodosLosProductos());
                    break;

                case 4: // Listar productos por nombre
                    String nombre = vista.pedirNombreProducto();
                    if (nombre != null) {
                        vista.mostrarListaProductos(productoDAO.buscarProductosPorNombre(nombre));
                    }
                    break;

                case 5: // Listar productos por categoría
                    String categoria = vista.pedirCategoria();
                    if (categoria != null) {
                        vista.mostrarListaProductos(productoDAO.buscarProductoPorCategoria(categoria));
                    }
                    break;

                case 6: // Actualizar producto
                    int idActualizar = vista.pedirId("producto");
                    if (idActualizar != -1) {
                        ProductoOtaku existente = productoDAO.obtenerProductoPorId(idActualizar);
                        if (existente != null) {
                            ProductoOtaku actualizado = vista.pedirDatosProducto();
                            actualizado.setId(idActualizar);
                            if (productoDAO.actualizarProducto(actualizado)) {
                                vista.mostrarMensaje("Producto actualizado correctamente.");
                            } else {
                                vista.mostrarError("No se pudo actualizar el producto.");
                            }
                        } else {
                            vista.mostrarError("Producto no encontrado con ID: " + idActualizar);
                        }
                    }
                    break;

                case 7: // Eliminar producto
                    int idEliminar = vista.pedirId("producto");
                    if (idEliminar != -1) {
                        if (productoDAO.eliminarProducto(idEliminar)) {
                            vista.mostrarMensaje("Producto eliminado correctamente.");
                        } else {
                            vista.mostrarError("No se pudo eliminar el producto o no existe.");
                        }
                    }
                    break;
                case 8:
                	String resultado = vista.pedirDatosIA();
                	System.out.println(resultado);
                	break;

                case 9: // Salir
                    salir = true;
                    vista.cerrarScanner(); // Cerramos el Scanner
                    vista.mostrarMensaje("Saliendo del programa...");
                    break;

                default:
                    vista.mostrarError("Opción no válida. Seleccione entre 1 y 12.");
            }
        }
    }
}
